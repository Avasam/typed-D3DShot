from _typeshed import Incomplete

class ImportedNamespaces:
    data: Incomplete
    def __init__(self) -> None: ...
    def add(
        self, name1, name2: Incomplete | None = None, symbols: Incomplete | None = None
    ) -> None: ...
    def __contains__(self, item) -> bool: ...
    def get_symbols(self) -> set[str]: ...
    def getvalue(self): ...

class DeclaredNamespaces:
    data: Incomplete
    def __init__(self) -> None: ...
    def add(self, alias, definition, comment: Incomplete | None = None) -> None: ...
    def get_symbols(self) -> set[str]: ...
    def getvalue(self): ...

class EnumerationNamespaces:
    data: Incomplete
    def __init__(self) -> None: ...
    def add(self, enum_name: str, member_name: str, value: int) -> None: ...
    def __contains__(self, item: str) -> bool: ...
    def get_symbols(self) -> set[str]: ...
    def to_constants(self) -> str: ...
    def to_intflags(self) -> str: ...
