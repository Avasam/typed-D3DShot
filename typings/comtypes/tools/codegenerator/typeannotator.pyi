import abc
from collections.abc import Iterable, Sequence
from typing import Any, Generic, TypeVar

from _typeshed import Incomplete
from comtypes import hints as hints
from comtypes.tools import typedesc as typedesc

_T_MTD = TypeVar("_T_MTD")

class _MethodAnnotator(abc.ABC, Generic[_T_MTD]):
    method: Incomplete
    def __init__(self, method: _T_MTD) -> None: ...
    @property
    def inarg_specs(self) -> Sequence[tuple[Any, str, Any | None]]: ...
    @abc.abstractmethod
    def getvalue(self, name: str) -> str: ...

class _MethodsAnnotator(abc.ABC, Generic[_T_MTD]):
    data: Incomplete
    def __init__(self) -> None: ...
    @abc.abstractmethod
    def to_method_annotator(self, method: _T_MTD) -> _MethodAnnotator[_T_MTD]: ...
    def generate(self, members: Iterable[_T_MTD]) -> str: ...

class ComMethodAnnotator(_MethodAnnotator[typedesc.ComMethod]):
    def getvalue(self, name: str) -> str: ...

class ComMethodsAnnotator(_MethodsAnnotator[typedesc.ComMethod]):
    def to_method_annotator(self, m: typedesc.ComMethod) -> ComMethodAnnotator: ...

class ComInterfaceMembersAnnotator:
    itf: Incomplete
    def __init__(self, itf: typedesc.ComInterface) -> None: ...
    def generate(self) -> str: ...

class DispMethodAnnotator(_MethodAnnotator[typedesc.DispMethod]):
    def getvalue(self, name: str) -> str: ...

class DispMethodsAnnotator(_MethodsAnnotator[typedesc.DispMethod]):
    def to_method_annotator(self, m: typedesc.DispMethod) -> DispMethodAnnotator: ...

class DispInterfaceMembersAnnotator:
    itf: Incomplete
    def __init__(self, itf: typedesc.DispInterface) -> None: ...
    def generate(self) -> str: ...
