from collections.abc import Sequence
from typing import Any

from _typeshed import Incomplete
from comtypes import typeinfo as typeinfo
from comtypes.tools import tlbparser as tlbparser, typedesc as typedesc
from comtypes.tools.codegenerator import (
    namespaces as namespaces,
    packing as packing,
    typeannotator as typeannotator,
)
from comtypes.tools.codegenerator.helpers import (
    ASSUME_STRINGS as ASSUME_STRINGS,
    ComMethodGenerator as ComMethodGenerator,
    DispMethodGenerator as DispMethodGenerator,
    DispPropertyGenerator as DispPropertyGenerator,
    TypeNamer as TypeNamer,
    get_real_type as get_real_type,
)
from comtypes.tools.codegenerator.modulenamer import name_wrapper_module as name_wrapper_module

version: Incomplete
logger: Incomplete
__warn_on_munge__ = __debug__

class CodeGenerator:
    stream: Incomplete
    imports: Incomplete
    declarations: Incomplete
    enums: Incomplete
    unnamed_enum_members: Incomplete
    known_symbols: Incomplete
    known_interfaces: Incomplete
    done: Incomplete
    names: Incomplete
    externals: Incomplete
    enum_aliases: Incomplete
    last_item_class: bool
    def __init__(
        self, known_symbols: Incomplete | None = None, known_interfaces: Incomplete | None = None
    ) -> None: ...
    def generate(self, item) -> None: ...
    def generate_all(self, items) -> None: ...
    filename: Incomplete
    more: Incomplete
    def generate_wrapper_code(self, tdescs: Sequence[Any], filename: str | None) -> str: ...
    def generate_friendly_code(self, modname: str) -> str: ...
    def need_VARIANT_imports(self, value) -> None: ...
    def ArrayType(self, tp: typedesc.ArrayType) -> None: ...
    def EnumValue(self, tp: typedesc.EnumValue) -> None: ...
    def Enumeration(self, tp: typedesc.Enumeration) -> None: ...
    def Typedef(self, tp: typedesc.Typedef) -> None: ...
    def FundamentalType(self, item: typedesc.FundamentalType) -> None: ...
    def StructureHead(self, head: typedesc.StructureHead) -> None: ...
    def Structure(self, struct: typedesc.Structure) -> None: ...
    def Union(self, union: typedesc.Union) -> None: ...
    def StructureBody(self, body: typedesc.StructureBody) -> None: ...
    def TypeLib(self, lib: typedesc.TypeLib) -> None: ...
    def External(self, ext: typedesc.External) -> None: ...
    def Constant(self, tp: typedesc.Constant) -> None: ...
    def SAFEARRAYType(self, sa: typedesc.SAFEARRAYType) -> None: ...
    def PointerType(self, tp: typedesc.PointerType) -> None: ...
    def CoClass(self, coclass: typedesc.CoClass) -> None: ...
    def ComInterface(self, itf: typedesc.ComInterface) -> None: ...
    def ComInterfaceHead(self, head: typedesc.ComInterfaceHead) -> None: ...
    def ComInterfaceBody(self, body: typedesc.ComInterfaceBody) -> None: ...
    def DispInterface(self, itf: typedesc.DispInterface) -> None: ...
    def DispInterfaceHead(self, head: typedesc.DispInterfaceHead) -> None: ...
    def DispInterfaceBody(self, body: typedesc.DispInterfaceBody) -> None: ...
    def make_ComMethod(self, m: typedesc.ComMethod, isdual: bool) -> None: ...
    def make_DispMethod(self, m: typedesc.DispMethod) -> None: ...
    def make_DispProperty(self, prop: typedesc.DispProperty) -> None: ...
