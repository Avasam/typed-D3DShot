from collections.abc import Iterator
from typing import Any, Callable, NamedTuple

import comtypes
from _typeshed import Incomplete
from comtypes import _CData
from typing_extensions import TypeAlias

_PositionalParamFlagType: TypeAlias = tuple[int, str | None]
_OptionalParamFlagType: TypeAlias = tuple[int, str | None, Any]
_ParamFlagType: TypeAlias = _PositionalParamFlagType | _OptionalParamFlagType
_PositionalArgSpecElmType: TypeAlias = tuple[list[str], type[_CData], str]
_OptionalArgSpecElmType: TypeAlias = tuple[list[str], type[_CData], str, Any]
_ArgSpecElmType: TypeAlias = _PositionalArgSpecElmType | _OptionalArgSpecElmType

class _ComMemberSpec(NamedTuple):
    restype: type[_CData] | None
    name: str
    argtypes: tuple[type[_CData], ...]
    paramflags: tuple[_ParamFlagType, ...] | None
    idlflags: tuple[str | int, ...]
    doc: str | None
    def is_prop(self) -> bool: ...

class _DispMemberSpec(NamedTuple):
    what: str
    name: str
    idlflags: tuple[str | int, ...]
    restype: type[_CData] | None
    argspec: tuple[_ArgSpecElmType, ...]
    @property
    def memid(self) -> int: ...
    def is_prop(self) -> bool: ...

_MemberSpec: TypeAlias = _ComMemberSpec | _DispMemberSpec
_PropFunc: TypeAlias = Callable[..., Any] | None
_DocType: TypeAlias = str | None

class PropertyMapping:
    def __init__(self) -> None: ...
    def add_propget(
        self, name: str, doc: _DocType, nargs: int, func: Callable[..., Any]
    ) -> None: ...
    def add_propput(
        self, name: str, doc: _DocType, nargs: int, func: Callable[..., Any]
    ) -> None: ...
    def add_propputref(
        self, name: str, doc: _DocType, nargs: int, func: Callable[..., Any]
    ) -> None: ...
    def __iter__(self) -> Iterator[tuple[str, _DocType, int, _PropFunc, _PropFunc]]: ...

class PropertyGenerator:
    def __init__(self, cls_name: str) -> None: ...
    def add(self, m: _MemberSpec, func: Callable[..., Any]) -> None: ...
    def __iter__(self) -> Iterator[tuple[str, property | named_property]]: ...
    def to_propget_keys(self, m: _MemberSpec) -> tuple[str, _DocType, int]: ...
    def to_propput_keys(self, m: _MemberSpec) -> tuple[str, _DocType, int]: ...
    def to_propputref_keys(self, m: _MemberSpec) -> tuple[str, _DocType, int]: ...

class ComPropertyGenerator(PropertyGenerator):
    def to_propget_keys(self, m: _ComMemberSpec) -> tuple[str, _DocType, int]: ...
    def to_propput_keys(self, m: _ComMemberSpec) -> tuple[str, _DocType, int]: ...
    def to_propputref_keys(self, m: _ComMemberSpec) -> tuple[str, _DocType, int]: ...

class DispPropertyGenerator(PropertyGenerator):
    def to_propget_keys(self, m: _DispMemberSpec) -> tuple[str, _DocType, int]: ...
    def to_propput_keys(self, m: _DispMemberSpec) -> tuple[str, _DocType, int]: ...
    def to_propputref_keys(self, m: _DispMemberSpec) -> tuple[str, _DocType, int]: ...

class ComMemberGenerator:
    def __init__(self, cls_name: str, vtbl_offset: int, iid: comtypes.GUID) -> None: ...
    def add(self, m: _ComMemberSpec) -> None: ...
    def methods(self): ...
    def properties(self): ...

class DispMemberGenerator:
    def __init__(self, cls_name: str) -> None: ...
    def add(self, m: _DispMemberSpec) -> None: ...
    def items(self): ...
    def properties(self): ...

class bound_named_property:
    name: Incomplete
    instance: Incomplete
    fget: Incomplete
    fset: Incomplete
    def __init__(self, name, fget, fset, instance) -> None: ...
    def __getitem__(self, index): ...
    def __call__(self, *args): ...
    def __setitem__(self, index, value) -> None: ...
    def __iter__(self): ...

class named_property:
    name: Incomplete
    fget: Incomplete
    fset: Incomplete
    __doc__: Incomplete
    def __init__(
        self,
        name,
        fget: Incomplete | None = None,
        fset: Incomplete | None = None,
        doc: Incomplete | None = None,
    ) -> None: ...
    def __get__(self, instance, owner: Incomplete | None = None): ...
    def __set__(self, instance) -> None: ...
