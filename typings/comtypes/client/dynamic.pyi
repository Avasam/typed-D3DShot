import ctypes
from typing import Any, TypeVar

from _typeshed import Incomplete
from comtypes import GUID, IUnknown, automation

_T_IUnknown = TypeVar("_T_IUnknown", bound=IUnknown)

__all__ = ["Dispatch"]

def Dispatch(obj): ...

class MethodCaller:
    def __init__(self, _id: int, _obj: _Dispatch) -> None: ...
    def __call__(self, *args: Any) -> Any: ...
    def __getitem__(self, *args: Any) -> Any: ...
    def __setitem__(self, *args: Any) -> None: ...

class _Dispatch:
    def __init__(self, comobj: ctypes._Pointer[automation.IDispatch]) -> None: ...
    def __getitem__(self, index: Any) -> Any: ...
    def QueryInterface(
        self, interface: type[_T_IUnknown], iid: GUID | None = None
    ) -> _T_IUnknown: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __iter__(self) -> _Collection: ...

class _Collection:
    enum: Incomplete
    def __init__(self, enum: automation.IEnumVARIANT) -> None: ...
    def __next__(self) -> Any: ...
    def __iter__(self): ...
